#include <stdio.h>
int i,j,max[10][10], alloc[10][10], need[10][10], avail[10], n, r, work[10], safeSeq[10], finish[10] = {0}, count = 0,found = 0;
void input() {
    printf("Enter processes, resources: ");
    scanf("%d %d", &n, &r);

    printf("Enter Max matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < r; j++)
            scanf("%d", &max[i][j]);

    printf("Enter Allocation matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < r; j++)
            scanf("%d", &alloc[i][j]);

    printf("Enter Available resources: ");
    for (int j = 0; j < r; j++)
        scanf("%d", &avail[j]);

    for (int i = 0; i < n; i++)
        for (int j = 0; j < r; j++)
            need[i][j] = max[i][j] - alloc[i][j];
}
int isSafe() {
    for (int i = 0; i < r; i++) work[i] = avail[i];
    while (count < n) {
        for (int p = 0; p < n; p++) {
            if (!finish[p]) {
                for (j = 0; j < r; j++)
                    if (need[p][j] > work[j]) break;
                if (j == r) {
                    for (int k = 0; k < r; k++) work[k] += alloc[p][k];
                    safeSeq[count++] = p;
                    finish[p] = 1;
                    found = 1;
                }} }
        if (!found) return 0;
    }
    printf("Safe sequence: ");
    for (int i = 0; i < n; i++) printf("P%d ", safeSeq[i]);
    printf("\n");
    return 1;
}
int main() {
    input();
    if (!isSafe()) printf("The system is not in a safe state.\n");
    return 0;
}
