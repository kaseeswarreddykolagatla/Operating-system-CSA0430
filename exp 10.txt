#include <stdio.h>
#include <stdlib.h>
#include <sys/msg.h>
#include <sys/wait.h>
#include <unistd.h>

#define MSG_QUEUE_KEY 1234
#define MSG_TYPE 1

typedef struct {
    long msg_type;
    char msg_text[256];
} msgbuf;

int main() {
    // Create a message queue
    int msqid = msgget(MSG_QUEUE_KEY, IPC_CREAT | 0666);
    if (msqid == -1) {
        perror("msgget");
        exit(1);
    }

    // Create a child process
    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(1);
    }

    if (pid == 0) { // Child process
        // Send a message to the message queue
        msgbuf msg;
        msg.msg_type = MSG_TYPE;
        sprintf(msg.msg_text, "Hello from child!");
        if (msgsnd(msqid, &msg, sizeof(msg.msg_text), 0) == -1) {
            perror("msgsnd");
            exit(1);
        }

        printf("Child process sent message to message queue\n");
    } else { // Parent process
        // Wait for the child process to send a message
        wait(NULL);

        // Receive a message from the message queue
        msgbuf msg;
        if (msgrcv(msqid, &msg, sizeof(msg.msg_text), MSG_TYPE, 0) == -1) {
            perror("msgrcv");
            exit(1);
        }

        printf("Parent process received message from message queue: %s\n", msg.msg_text);
    }

    // Remove the message queue
    if (msgctl(msqid, IPC_RMID, NULL) == -1) {
        perror("msgctl");
        exit(1);
    }

    return 0;
}
