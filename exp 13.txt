#include <stdio.h>
#include <stdlib.h>

// First-Fit Memory Allocation Strategy
void firstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];

    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                printf("Process %d allocated to block %d\n", i, j);
                break;
            }
        }
    }

    printf("Process No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i, processSize[i]);
        if (allocation[i]!= -1)
            printf("%d\n", allocation[i]);
        else
            printf("Not allocated\n");
    }
}

// Best-Fit Memory Allocation Strategy
void bestFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];

    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    for (int i = 0; i < n; i++) {
        int best = -1;
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (best == -1 || blockSize[best] > blockSize[j])
                    best = j;
            }
        }

        if (best!= -1) {
            allocation[i] = best;
            blockSize[best] -= processSize[i];
            printf("Process %d allocated to block %d\n", i, best);
        }
    }

    printf("Process No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i, processSize[i]);
        if (allocation[i]!= -1)
            printf("%d\n", allocation[i]);
        else
            printf("Not allocated\n");
    }
}

// Worst-Fit Memory Allocation Strategy
void worstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[n];

    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    for (int i = 0; i < n; i++) {
        int worst = -1;
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (worst == -1 || blockSize[worst] < blockSize[j])
                    worst = j;
            }
        }

        if (worst!= -1) {
            allocation[i] = worst;
            blockSize[worst] -= processSize[i];
            printf("Process %d allocated to block %d\n", i, worst);
        }
    }

    printf("Process No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i, processSize[i]);
        if (allocation[i]!= -1)
            printf("%d\n", allocation[i]);
        else
            printf("Not allocated\n");
    }
}

int main() {
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    int m = sizeof(blockSize) / sizeof(blockSize[0]);
    int n = sizeof(processSize) / sizeof(processSize[0]);

    printf("First-Fit Memory Allocation Strategy:\n");
    firstFit(blockSize, m, processSize, n);

    printf("\nBest-Fit Memory Allocation Strategy:\n");
    int blockSize2[] = {100, 500, 200, 300, 600};
    bestFit(blockSize2, m, processSize, n);

    printf("\nWorst-Fit Memory Allocation Strategy:\n");
    int blockSize3[] = {100, 500, 200, 300, 600};
    worstFit(blockSize3, m, processSize, n);

    return 0;
}
