#include <stdio.h>

#define NUM_RESOURCES 3
#define NUM_PROCESSES 5

int available[NUM_RESOURCES]; // Available resources
int max[NUM_PROCESSES][NUM_RESOURCES]; // Maximum resources required by each process
int allocation[NUM_PROCESSES][NUM_RESOURCES]; // Currently allocated resources to each process
int need[NUM_PROCESSES][NUM_RESOURCES]; // Remaining resources needed by each process

void init() {
    // Initialize available resources
    available[0] = 10; // Resource A
    available[1] = 5; // Resource B
    available[2] = 7; // Resource C

    // Initialize maximum resources required by each process
    max[0][0] = 3; max[0][1] = 2; max[0][2] = 1;
    max[1][0] = 1; max[1][1] = 3; max[1][2] = 2;
    max[2][0] = 2; max[2][1] = 1; max[2][2] = 3;
    max[3][0] = 4; max[3][1] = 2; max[3][2] = 1;
    max[4][0] = 1; max[4][1] = 2; max[4][2] = 4;

    // Initialize currently allocated resources to each process
    allocation[0][0] = 1; allocation[0][1] = 1; allocation[0][2] = 0;
    allocation[1][0] = 0; allocation[1][1] = 2; allocation[1][2] = 1;
    allocation[2][0] = 1; allocation[2][1] = 0; allocation[2][2] = 2;
    allocation[3][0] = 2; allocation[3][1] = 1; allocation[3][2] = 0;
    allocation[4][0] = 0; allocation[4][1] = 1; allocation[4][2] = 3;

    // Calculate remaining resources needed by each process
    for (int i = 0; i < NUM_PROCESSES; i++) {
        for (int j = 0; j < NUM_RESOURCES; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}

void printState() {
    printf("Available Resources: ");
    for (int i = 0; i < NUM_RESOURCES; i++) {
        printf("%d ", available[i]);
    }
    printf("\n");

    printf("Allocation Matrix:\n");
    for (int i = 0; i < NUM_PROCESSES; i++) {
        for (int j = 0; j < NUM_RESOURCES; j++) {
            printf("%d ", allocation[i][j]);
        }
        printf("\n");
    }

    printf("Need Matrix:\n");
    for (int i = 0; i < NUM_PROCESSES; i++) {
        for (int j = 0; j < NUM_RESOURCES; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
}

int isSafeState() {
    int work[NUM_RESOURCES];
    for (int i = 0; i < NUM_RESOURCES; i++) {
        work[i] = available[i];
    }

    int finish[NUM_PROCESSES];
    for (int i = 0; i < NUM_PROCESSES; i++) {
        finish[i] = 0;
    }

    int count = 0;
    while (count < NUM_PROCESSES) {
        int found = 0;
        for (int i = 0; i < NUM_PROCESSES; i++) {
            if (finish[i] == 0) {
                int j;
                for (j = 0; j < NUM_RESOURCES; j++) {
                    if (need[i][j] > work[j]) {
                        break;
                    }
                }
                if (j == NUM_RESOURCES) {
                    for (int k = 0; k < NUM_RESOURCES; k++) {
                        work[k] += allocation[i][k];
                    }
                    finish[i] = 1;
                    found = 1;
                    count++;
                }
            }
        }
        if (!found) {
            return 0; // Deadlock detected
        }
    }
    return 1; // Safe state
}

int main() {
    init();
    printState();

    if (isSafeState()) {
        printf("System is in a safe state.\n");
    } else {
        printf("System is
