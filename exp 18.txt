#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 5
#define NUM_PRODUCERS 2
#define NUM_CONSUMERS 2

sem_t empty, full, mutex;
int buffer[BUFFER_SIZE];
int in = 0, out = 0;

void* producer(void* arg) {
    int i, item;
    for (i = 0; i < 10; i++) {
        item = rand() % 100; // generate a random item
        sem_wait(&empty); // wait for an empty slot
        sem_wait(&mutex); // lock the buffer
        buffer[in] = item;
        in = (in + 1) % BUFFER_SIZE;
        printf("Produced: %d\n", item);
        sem_post(&mutex); // unlock the buffer
        sem_post(&full); // signal that the buffer is full
    }
    return NULL;
}

void* consumer(void* arg) {
    int i, item;
    for (i = 0; i < 10; i++) {
        sem_wait(&full); // wait for a full slot
        sem_wait(&mutex); // lock the buffer
        item = buffer[out];
        out = (out + 1) % BUFFER_SIZE;
        printf("Consumed: %d\n", item);
        sem_post(&mutex); // unlock the buffer
        sem_post(&empty); // signal that the buffer is empty
    }
    return NULL;
}

int main() {
    pthread_t producers[NUM_PRODUCERS], consumers[NUM_CONSUMERS];
    sem_init(&empty, 0, BUFFER_SIZE); // initialize empty semaphore
    sem_init(&full, 0, 0); // initialize full semaphore
    sem_init(&mutex, 0, 1); // initialize mutex semaphore

    int i;
    for (i = 0; i < NUM_PRODUCERS; i++) {
        pthread_create(&producers[i], NULL, producer, NULL);
    }
    for (i = 0; i < NUM_CONSUMERS; i++) {
        pthread_create(&consumers[i], NULL, consumer, NULL);
    }

    for (i = 0; i < NUM_PRODUCERS; i++) {
        pthread_join(producers[i], NULL);
    }
    for (i = 0; i < NUM_CONSUMERS; i++) {
        pthread_join(consumers[i], NULL);
    }

    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}
