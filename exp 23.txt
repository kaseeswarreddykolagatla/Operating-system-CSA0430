#include <stdio.h>
#include <stdlib.h>

#define MAX_HOLES 10
#define MAX_PROCESSES 10

typedef struct {
    int size;
    int allocated;
} Hole;

typedef struct {
    int pid;
    int size;
} Process;

Hole holes[MAX_HOLES];
Process processes[MAX_PROCESSES];

int num_holes = 0;
int num_processes = 0;

void init_holes() {
    for (int i = 0; i < MAX_HOLES; i++) {
        holes[i].size = rand() % 100 + 1; // Random size between 1 and 100
        holes[i].allocated = 0;
    }
    num_holes = MAX_HOLES;
}

void init_processes() {
    for (int i = 0; i < MAX_PROCESSES; i++) {
        processes[i].pid = i + 1;
        processes[i].size = rand() % 50 + 1; // Random size between 1 and 50
    }
    num_processes = MAX_PROCESSES;
}

void print_holes() {
    printf("Holes:\n");
    for (int i = 0; i < num_holes; i++) {
        printf("Hole %d: size=%d, allocated=%d\n", i + 1, holes[i].size, holes[i].allocated);
    }
}

void print_processes() {
    printf("Processes:\n");
    for (int i = 0; i < num_processes; i++) {
        printf("Process %d: size=%d\n", processes[i].pid, processes[i].size);
    }
}

void first_fit() {
    for (int i = 0; i < num_processes; i++) {
        for (int j = 0; j < num_holes; j++) {
            if (!holes[j].allocated && holes[j].size >= processes[i].size) {
                holes[j].allocated = 1;
                printf("Process %d allocated to hole %d\n", processes[i].pid, j + 1);
                break;
            }
        }
    }
}

int main() {
    init_holes();
    init_processes();
    print_holes();
    print_processes();
    first_fit();
    print_holes();
    return 0;
}
