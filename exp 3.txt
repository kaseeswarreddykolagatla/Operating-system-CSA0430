#include <stdio.h>

#define MAX_PROCESSES 5

// Structure to represent a process
typedef struct Process {
    int pid; // process ID
    int burstTime; // CPU burst time
    int arrivalTime; // arrival time (always 0 in this case)
    int waitingTime; // waiting time
    int turnaroundTime; // turnaround time
} Process;

// Function to simulate FCFS CPU scheduling algorithm
void simulateFCFS(Process processes[], int numProcesses) {
    int currentTime = 0;
    int totalWaitingTime = 0;
    int totalTurnaroundTime = 0;

    printf("Simulating FCFS CPU scheduling algorithm...\n");

    for (int i = 0; i < numProcesses; i++) {
        printf("Process %d:\n", processes[i].pid);

        // Calculate waiting time
        processes[i].waitingTime = currentTime;
        printf("Waiting time: %d\n", processes[i].waitingTime);

        // Calculate turnaround time
        currentTime += processes[i].burstTime;
        processes[i].turnaroundTime = currentTime;
        printf("Turnaround time: %d\n", processes[i].turnaroundTime);

        // Update total waiting time and turnaround time
        totalWaitingTime += processes[i].waitingTime;
        totalTurnaroundTime += processes[i].turnaroundTime;
    }

    printf("Average waiting time: %.2f\n", (float)totalWaitingTime / numProcesses);
    printf("Average turnaround time: %.2f\n", (float)totalTurnaroundTime / numProcesses);
}

int main() {
    Process processes[MAX_PROCESSES] = {
        {1, 10, 0, 0, 0},
        {2, 5, 0, 0, 0},
        {3, 8, 0, 0, 0},
        {4, 12, 0, 0, 0},
        {5, 3, 0, 0, 0}
    };
    int numProcesses = sizeof(processes) / sizeof(Process);

    simulateFCFS(processes, numProcesses);

    return 0;
}
