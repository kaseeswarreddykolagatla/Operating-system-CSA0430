#include <pthread.h>
#include <stdio.h>
#include <unistd.h>

void* thread_function1(void* arg) {
    printf("Hello from new thread 1!\n");
    pthread_exit(NULL); // exit the thread
    return NULL;
}

void* thread_function2(void* arg) {
    printf("Hello from new thread 2!\n");
    sleep(2); // simulate some work
    printf("New thread 2 finished.\n");
    return NULL;
}

int main() {
    pthread_t thread1, thread2;
    int ret;

    // Create thread 1
    ret = pthread_create(&thread1, NULL, thread_function1, NULL);
    if (ret != 0) {
        printf("Error creating thread 1: %d\n", ret);
        return 1;
    }

    // Create thread 2
    ret = pthread_create(&thread2, NULL, thread_function2, NULL);
    if (ret != 0) {
        printf("Error creating thread 2: %d\n", ret);
        return 1;
    }

    // Join thread 1
    printf("Main thread is waiting for thread 1 to finish...\n");
    pthread_join(thread1, NULL);
    printf("Main thread finished waiting for thread 1.\n");

    // Check if thread 1 and thread 2 are equal
    if (pthread_equal(thread1, thread2)) {
        printf("Thread 1 and Thread 2 are equal.\n");
    } else {
        printf("Thread 1 and Thread 2 are not equal.\n");
    }

    // Join thread 2
    printf("Main thread is waiting for thread 2 to finish...\n");
    pthread_join(thread2, NULL);
    printf("Main thread finished waiting for thread 2.\n");

    return 0;
}
