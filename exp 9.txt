#include <stdio.h>
#include <stdlib.h>
#include <sys/mman.h>
#include <sys/wait.h>
#include <unistd.h>

#define SHARED_MEMORY_SIZE 1024

int main() {
    // Create a shared memory segment
    int fd = shm_open("/my_shared_memory", O_CREAT | O_RDWR, 0666);
    if (fd == -1) {
        perror("shm_open");
        exit(1);
    }

    // Set the size of the shared memory segment
    if (ftruncate(fd, SHARED_MEMORY_SIZE) == -1) {
        perror("ftruncate");
        exit(1);
    }

    // Map the shared memory segment into the address space
    void* shared_memory = mmap(NULL, SHARED_MEMORY_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
    if (shared_memory == MAP_FAILED) {
        perror("mmap");
        exit(1);
    }

    // Create a child process
    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(1);
    }

    if (pid == 0) { // Child process
        // Write to the shared memory
        char* message = "Hello from child!";
        sprintf((char*)shared_memory, "%s", message);
        printf("Child process wrote to shared memory: %s\n", message);

        // Wait for the parent process to read from the shared memory
        sleep(1);
    } else { // Parent process
        // Wait for the child process to write to the shared memory
        sleep(1);

        // Read from the shared memory
        char message[SHARED_MEMORY_SIZE];
        sprintf(message, "%s", (char*)shared_memory);
        printf("Parent process read from shared memory: %s\n", message);
    }

    // Unmap the shared memory segment
    if (munmap(shared_memory, SHARED_MEMORY_SIZE) == -1) {
        perror("munmap");
        exit(1);
    }

    // Close the shared memory segment
    if (close(fd) == -1) {
        perror("close");
        exit(1);
    }

    // Remove the shared memory segment
    if (shm_unlink("/my_shared_memory") == -1) {
        perror("shm_unlink");
        exit(1);
    }

    return 0;
}
